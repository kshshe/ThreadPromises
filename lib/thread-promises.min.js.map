{"mappings":"MAAe,SAAAA,EAAyBC,GACtC,MAAO,mDAESA,whBAuBlB,CClBAC,OAAOC,SCcQ,MACLC,qBAA2D,OAC3DC,mBAAuD,OAM/DC,YAAYL,KAAuEM,GAIjF,GAHAC,KAAKP,SAAWA,EAChBO,KAAKD,WAAaA,EAEI,oBAAXL,SAA0BA,OAAOO,OAKrC,CACL,SAASC,EAAiBC,EAASC,GACjCX,EAASU,EAASC,KAAWL,EAC/B,CACA,OAAO,IAAIM,QAAqBH,EAClC,CATEI,YAAW,KACTN,KAAKO,eACLP,KAAKQ,aAAW,GAQtB,CAEQD,eACN,IAAIE,EAAO,IAAIC,KAAK,CAACV,KAAKW,yBAChBjB,OAAOkB,KAAOlB,OAAOmB,UAC/B,IAAIC,EAAUpB,OAAOkB,IAAIG,gBAAgBN,GACzCT,KAAKgB,OAAS,IAAIf,OAAOa,GACzBd,KAAKgB,OAAOC,UAAYjB,KAAKkB,cAAcC,KAAKnB,KAClD,CAEQkB,cAAcE,GACpB,MAAMC,KAAEA,EAAIC,KAAEA,GAASF,EAAEC,KACzB,OAAQC,GACN,IAAK,uBACHtB,KAAKJ,qBAAqByB,GAC1B,MACF,IAAK,qBACHrB,KAAKH,mBAAmBwB,GAK9B,CAEQb,cACN,MAAMe,EAAsC,CAC1CxB,WAAYC,KAAKD,YAEnBC,KAAKgB,OAAOQ,YAAYD,EAC1B,CAEQZ,uBAEN,OAAOnB,EADUQ,KAAKP,SAASgC,WAEjC,CAEAC,KAAKC,GAEH,OADA3B,KAAKJ,qBAAuB+B,EACrB3B,IACT,CAEA4B,MAAMD,GAEJ,OADA3B,KAAKH,mBAAqB8B,EACnB3B,IACT,E","sources":["src/getFunctionBody.ts","browsers.ts","src/TPromise.ts"],"sourcesContent":["export default function getFunctionBody(executor: string): string {\n  return `\n    function getExecutor() {\n        return (${executor});\n    }\n    function onFullfilledCallback(data) {\n      self.postMessage({\n        type: \"onFullfilledCallback\",\n        data,\n      });\n      self.close();\n    }\n    function onRejectedCallback(data) {\n      self.postMessage({\n        type: \"onRejectedCallback\",\n        data,\n      });\n      self.close();\n    }\n    const executor = getExecutor();\n    self.onmessage = function ({\n      data: { parameters },\n    }) {\n      executor(onFullfilledCallback, onRejectedCallback, ...(parameters || []));\n    };\n  `\n}\n","import TPromise from './src/TPromise';\n\ndeclare global {\n    interface Window {\n        TPromise: typeof TPromise;\n    }\n}\n\nwindow.TPromise = TPromise;\n","import getFunctionBody from './getFunctionBody';\n\ntype TExecutorFunction<TParameters extends Array<unknown>, TReturnType, TRejectType> = \n  (resolve: (value: TReturnType) => void, \n  reject: (reason: TRejectType) => void, \n  ...parameters: TParameters) => void;\n\ntype TStartMessage<TParameters extends Array<unknown>> = {\n  parameters: TParameters;\n};\n\ntype TResultMessage<TReturnType, TRejectType> = {\n  type: \"onFullfilledCallback\",\n  data: TReturnType,\n} | {\n  type: \"onRejectedCallback\",\n  data: TRejectType,\n}\n\ntype TOnFullfilledCallback<TReturnType> = (data: TReturnType) => void;\ntype TOnRejectedCallback<TRejectType> = (data: TRejectType) => void;\n\nexport default class TPromise<TParameters extends Array<unknown>, TReturnType, TRejectType> {\n  private onFullfilledCallback: TOnFullfilledCallback<TReturnType> = () => {};\n  private onRejectedCallback: TOnRejectedCallback<TRejectType> = () => {};\n\n  private executor: TExecutorFunction<TParameters, TReturnType, TRejectType>;\n  private parameters: TParameters;\n  private worker: Worker;\n  \n  constructor(executor: TExecutorFunction<TParameters, TReturnType, TRejectType>, ...parameters: TParameters) {\n    this.executor = executor;\n    this.parameters = parameters;\n\n    if (typeof window !== \"undefined\" && window.Worker) {\n      setTimeout(() => {\n        this.createWorker();\n        this.startWorker();\n      });\n    } else {\n      function fallbackExecutor(resolve, reject) {\n        executor(resolve, reject, ...parameters);\n      }\n      return new Promise<TReturnType>(fallbackExecutor) as unknown as TPromise<TParameters, TReturnType, TRejectType>;\n    }\n  }\n\n  private createWorker() {\n    var blob = new Blob([this.createWorkerFunction()]);\n    const U = window.URL || window.webkitURL;\n    var blobURL = window.URL.createObjectURL(blob);\n    this.worker = new Worker(blobURL);\n    this.worker.onmessage = this.handleMessage.bind(this);\n  }\n\n  private handleMessage(e: MessageEvent<TResultMessage<TReturnType, TRejectType>>) {\n    const { data, type } = e.data;\n    switch (type) {\n      case \"onFullfilledCallback\":\n        this.onFullfilledCallback(data);\n        break;\n      case \"onRejectedCallback\":\n        this.onRejectedCallback(data);\n        break;\n      default:\n        break;\n    }\n  }\n\n  private startWorker() {\n    const message: TStartMessage<TParameters> = {\n      parameters: this.parameters,\n    };\n    this.worker.postMessage(message);\n  }\n\n  private createWorkerFunction() {\n    const executor = this.executor.toString();\n    return getFunctionBody(executor);\n  }\n\n  then(callback: TOnFullfilledCallback<TReturnType>) {\n    this.onFullfilledCallback = callback;\n    return this;\n  }\n\n  catch(callback: TOnRejectedCallback<TRejectType>) {\n    this.onRejectedCallback = callback;\n    return this;\n  }\n};\n"],"names":["$b2f8169c905e6f74$export$2e2bcd8739ae039","executor","window","TPromise","onFullfilledCallback","onRejectedCallback","constructor","parameters","this","Worker","fallbackExecutor","resolve","reject","Promise","setTimeout","createWorker","startWorker","blob","Blob","createWorkerFunction","URL","webkitURL","blobURL","createObjectURL","worker","onmessage","handleMessage","bind","e","data","type","message","postMessage","toString","then","callback","catch"],"version":3,"file":"thread-promises.min.js.map"}