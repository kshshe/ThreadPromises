(()=>{var e,n={604:(e,n,t)=>{function a(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function r(e,n){for(var t=0;t<n.length;t++){var a=n[t];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var l=t(630);e.exports=function(){function e(n){var t=this;a(this,e),o(this,"onFullfilledCallback",(function(){})),o(this,"onRejectedCallback",(function(){})),this.executor=n;for(var r=arguments.length,l=new Array(r>1?r-1:0),i=1;i<r;i++)l[i-1]=arguments[i];if(this.parameters=l,"undefined"==typeof window||!window.Worker)return new Promise(n);setTimeout((function(){t.createWorker(),t.startWorker()}))}var n,t;return n=e,(t=[{key:"onWorkerMessage",value:function(e){console.log(e)}},{key:"createWorker",value:function(){var e=new Blob([this.createWorkerFunction()]),n=(window.URL||window.webkitURL,window.URL.createObjectURL(e));this.worker=new Worker(n),this.worker.onmessage=this.handleMessage.bind(this)}},{key:"handleMessage",value:function(e){var n=e.data,t=n.data;switch(n.type){case"onFullfilledCallback":this.onFullfilledCallback(t);break;case"onRejectedCallback":this.onRejectedCallback(t)}}},{key:"startWorker",value:function(){this.worker.postMessage({parameters:this.parameters})}},{key:"createWorkerFunction",value:function(){var e=this.executor.toString();return l(e)}},{key:"then",value:function(e){return this.onFullfilledCallback=e,this}},{key:"catch",value:function(e){return this.onRejectedCallback=e,this}}])&&r(n.prototype,t),e}()},630:e=>{e.exports=function(e){return"\n  function getExecutor() {\n      return (".concat(e,');\n  }\n  function onFullfilledCallback(data) {\n    self.postMessage({\n      type: "onFullfilledCallback",\n      data,\n    });\n    self.close();\n  }\n  function onRejectedCallback(data) {\n    self.postMessage({\n      type: "onRejectedCallback",\n      data,\n    });\n    self.close();\n  }\n  const executor = getExecutor();\n  self.onmessage = function ({\n    data: { parameters },\n  }) {\n    executor(onFullfilledCallback, onRejectedCallback, ...(parameters || []));\n  };\n')}}},t={};e=function e(a){var r=t[a];if(void 0!==r)return r.exports;var o=t[a]={exports:{}};return n[a](o,o.exports,e),o.exports}(604),window.TPromise=e})();