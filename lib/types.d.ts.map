{"mappings":"ACEA,uBAAuB,WAAW,SAAS,KAAK,CAAC,OAAO,CAAC,EAAE,WAAW,EAAE,WAAW,IACjF,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,WAAW,KAAK,IAAI,EACtC,MAAM,EAAE,CAAC,MAAM,EAAE,WAAW,KAAK,IAAI,EACrC,GAAG,UAAU,EAAE,WAAW,KAAK,IAAI,CAAC;AActC,2BAA2B,WAAW,IAAI,CAAC,IAAI,EAAE,WAAW,KAAK,IAAI,CAAC;AACtE,yBAAyB,WAAW,IAAI,CAAC,IAAI,EAAE,WAAW,KAAK,IAAI,CAAC;AAEpE,uBAA8B,WAAW,SAAS,KAAK,CAAC,OAAO,CAAC,EAAE,WAAW,EAAE,WAAW;gBAQ5E,QAAQ,EAAE,kBAAkB,WAAW,EAAE,WAAW,EAAE,WAAW,CAAC,EAAE,GAAG,UAAU,EAAE,WAAW;IAmD1G,IAAI,CAAC,QAAQ,EAAE,sBAAsB,WAAW,CAAC;IAKjD,KAAK,CAAC,QAAQ,EAAE,oBAAoB,WAAW,CAAC;CAIjD;ACxFD,eAAe,QAAQ,CAAA","sources":["src/getFunctionBody.ts","src/TPromise.ts","index.ts"],"sourcesContent":["export default function getFunctionBody(executor: string): string {\n  return `\n    function getExecutor() {\n        return (${executor});\n    }\n    function onFullfilledCallback(data) {\n      self.postMessage({\n        type: \"onFullfilledCallback\",\n        data,\n      });\n      self.close();\n    }\n    function onRejectedCallback(data) {\n      self.postMessage({\n        type: \"onRejectedCallback\",\n        data,\n      });\n      self.close();\n    }\n    const executor = getExecutor();\n    self.onmessage = function ({\n      data: { parameters },\n    }) {\n      executor(onFullfilledCallback, onRejectedCallback, ...(parameters || []));\n    };\n  `\n}\n","import getFunctionBody from './getFunctionBody';\n\ntype TExecutorFunction<TParameters extends Array<unknown>, TReturnType, TRejectType> = \n  (resolve: (value: TReturnType) => void, \n  reject: (reason: TRejectType) => void, \n  ...parameters: TParameters) => void;\n\ntype TStartMessage<TParameters extends Array<unknown>> = {\n  parameters: TParameters;\n};\n\ntype TResultMessage<TReturnType, TRejectType> = {\n  type: \"onFullfilledCallback\",\n  data: TReturnType,\n} | {\n  type: \"onRejectedCallback\",\n  data: TRejectType,\n}\n\ntype TOnFullfilledCallback<TReturnType> = (data: TReturnType) => void;\ntype TOnRejectedCallback<TRejectType> = (data: TRejectType) => void;\n\nexport default class TPromise<TParameters extends Array<unknown>, TReturnType, TRejectType> {\n  private onFullfilledCallback: TOnFullfilledCallback<TReturnType> = () => {};\n  private onRejectedCallback: TOnRejectedCallback<TRejectType> = () => {};\n\n  private executor: TExecutorFunction<TParameters, TReturnType, TRejectType>;\n  private parameters: TParameters;\n  private worker: Worker;\n  \n  constructor(executor: TExecutorFunction<TParameters, TReturnType, TRejectType>, ...parameters: TParameters) {\n    this.executor = executor;\n    this.parameters = parameters;\n\n    if (typeof window !== \"undefined\" && window.Worker) {\n      setTimeout(() => {\n        this.createWorker();\n        this.startWorker();\n      });\n    } else {\n      function fallbackExecutor(resolve, reject) {\n        executor(resolve, reject, ...parameters);\n      }\n      return new Promise<TReturnType>(fallbackExecutor) as unknown as TPromise<TParameters, TReturnType, TRejectType>;\n    }\n  }\n\n  private createWorker() {\n    var blob = new Blob([this.createWorkerFunction()]);\n    const U = window.URL || window.webkitURL;\n    var blobURL = window.URL.createObjectURL(blob);\n    this.worker = new Worker(blobURL);\n    this.worker.onmessage = this.handleMessage.bind(this);\n  }\n\n  private handleMessage(e: MessageEvent<TResultMessage<TReturnType, TRejectType>>) {\n    const { data, type } = e.data;\n    switch (type) {\n      case \"onFullfilledCallback\":\n        this.onFullfilledCallback(data);\n        break;\n      case \"onRejectedCallback\":\n        this.onRejectedCallback(data);\n        break;\n      default:\n        break;\n    }\n  }\n\n  private startWorker() {\n    const message: TStartMessage<TParameters> = {\n      parameters: this.parameters,\n    };\n    this.worker.postMessage(message);\n  }\n\n  private createWorkerFunction() {\n    const executor = this.executor.toString();\n    return getFunctionBody(executor);\n  }\n\n  then(callback: TOnFullfilledCallback<TReturnType>) {\n    this.onFullfilledCallback = callback;\n    return this;\n  }\n\n  catch(callback: TOnRejectedCallback<TRejectType>) {\n    this.onRejectedCallback = callback;\n    return this;\n  }\n};\n","import TPromise from \"./src/TPromise\"\n\nexport default TPromise"],"names":[],"version":3,"file":"types.d.ts.map"}